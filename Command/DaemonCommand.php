<?php

namespace App\Command;

use Ispolin08\ClerkBundle\Service\ClerkService;
use Psr\Log\LoggerInterface;
use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Cache\Adapter\FilesystemAdapter;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class DaemonCommand extends ContainerAwareCommand
{
    private $twig;

    /** @var  LoggerInterface */
    private $logger;

    private $env;

    /** @var  array */
    private $checksList;


    /** @var ClerkService */
    private $cl;

    protected function configure()
    {
        $this
            ->setName('app:daemon-run')
            ->setDescription('Process all')
            ->addArgument(
                'checkers',
                InputArgument::IS_ARRAY
            )//            ->setHelp('This command allows you to create a user...')
        ;
    }

    protected function initialize(InputInterface $input, OutputInterface $output)
    {
        $checks = $input->getArgument('checkers');

        parent::initialize($input, $output); // TODO: Change the autogenerated stub

        $this->twig = $this->getContainer()->get('twig');
//        $this->logger = $this->getContainer()->get('logger');
        $this->env = $this->getContainer()->getParameter('kernel.environment');

        $this->cl = $this->getContainer()->get(ClerkService::class);

        if ($this->env == 'dev' && count($checks)==0) {
            $this->checksList = $this->getContainer()->getParameter('checks');
        } else {
            $this->loadChecks($checks);
        }

    }


    protected function loadChecks($checkList) {
        $res = [];

        foreach ($this->getContainer()->getParameter('checks') as $checkId => $check) {
            if (array_search($checkId, $checkList) !== false) {
                $res[$checkId] = $check;
            }
        }

        $this->checksList = $res;
    }



    protected function execute(InputInterface $input, OutputInterface $output)
    {

        foreach ($this->checksList as $checkId => $check) {

            $output->writeln($checkId);

            $this->cl->check($checkId, $check);


            sleep(1);

        }


// ...
    }

}